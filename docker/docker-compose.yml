version: "2.18"
services:
  app-scheduler-mysql:
    image: mysql:8.0.37
    container_name: app-scheduler-mysql
    # 使用该参数，容器内的root拥有真正的root权限，否则，容器内的root只是外部的一个普通用户权限
    # privileged: true
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MYSQL_USER: "app_scheduler"
      MYSQL_PASSWORD: "123456"
      MYSQL_DATABASE: "appscheduler"
      TZ: Asia/Shanghai
    command:
      --wait_timeout=31536000
      --interactive_timeout=31536000
      --max_connections=1000
      --default-authentication-plugin=mysql_native_password
      --user=mysql
    volumes:
      - "./docker_data/mysql/data:/var/lib/mysql"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3

  app-scheduler-server:
    image: appscheduler:latest
    # 等价于 docker build -t appscheduler -f docker/dockerfile .
    build:
      # 由于docker-compose放在docker目录下，因此context为上一层目录
      context: ..
      dockerfile: ./docker/dockerfile
    container_name: app-scheduler-server
    # 确保mysql服务已经正常启动
    depends_on:  
      app-scheduler-mysql:
        condition: service_healthy

    environment:
      LOG_LEVEL: "INFO"
      DATABASE_HOSTNAME: "app-scheduler-mysql"
      DATABASE_PORT: "3306"
      DATABASE_USER: "app_scheduler"
      DATABASE_PASSWORD: "123456"
      DATABASE_NAME: "appscheduler"
      TZ: Asia/Shanghai
    volumes:
      - "./docker_data/server/files:/appscheduler/files"
    ports:
      - "8000:8000"
    expose:
      - "8000"
    restart: unless-stopped
    entrypoint: |
      /bin/sh -c 'if [ ! -f /appscheduler/init_completed ]; then
        sleep 8
        python3 ./cli.py database init
        touch /appscheduler/init_completed
      fi
      python3 ./run.py'
      